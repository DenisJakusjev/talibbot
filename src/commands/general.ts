import { Bot } from "grammy";
import { prisma } from "../db.js";
import { normalizeNick, xmlEscape, replySafe } from "../utils.js";
import { EntryType } from "@prisma/client";
import { GROUP_NAME } from "../bot.js";

export function registerGeneralCommands(bot: Bot) {
    // –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∏–∫ (–≤ –ß–°/–¥—Ä—É–∑—å—è—Ö)
    bot.hears(/^(:–î–∂–∞—Ä–≤–∏—Å|@talibanlist_bot)\s+check\s+/i, async (ctx) => {
        const tail = ctx.message!.text!.replace(
            /^(:–î–∂–∞—Ä–≤–∏—Å|@talibanlist_bot)\s+check\s+/i,
            ""
        );
        try {
            const { nick, lower } = normalizeNick(tail);

            const enemy = await prisma.entry.findFirst({
                where: { nicknameLower: lower, type: EntryType.ENEMY },
            });
            const friend = await prisma.entry.findFirst({
                where: { nicknameLower: lower, type: EntryType.FRIEND },
            });

            if (!enemy && !friend)
                return replySafe(ctx, `üîç ${nick}: –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∏ –≤ –ß–°, –Ω–∏ –≤ –¥—Ä—É–∑—å—è—Ö.`);

            const lines: string[] = ["üîé –†–µ–∑—É–ª—å—Ç–∞—Ç:"];
            if (enemy)
                lines.push(`‚Ä¢ –ß–°${enemy.reason ? ` ‚Äî –ø—Ä–∏—á–∏–Ω–∞: ${enemy.reason}` : ""}`);
            if (friend) lines.push(`‚Ä¢ –î—Ä—É–≥`);
            return replySafe(ctx, lines.join("\n"));
        } catch {
            return replySafe(
                ctx,
                "‚ö†Ô∏è –£–∫–∞–∂–∏ –Ω–∏–∫. –ü—Ä–∏–º–µ—Ä:\n:–î–∂–∞—Ä–≤–∏—Å check \"La Plage\""
            );
        }
    });

    // –í—ã–¥–∞—Ç—å –ø–æ–ª–Ω—ã–π XML —Å–ø–∏—Å–∫–∞ –≤—Ä–∞–≥–æ–≤
    bot.hears(/^(:–î–∂–∞—Ä–≤–∏—Å|@talibanlist_bot)\s+give\s+full/i, async (ctx) => {
        const enemies = await prisma.entry.findMany({
            where: { type: EntryType.ENEMY },
            select: { nickname: true },
            orderBy: { nickname: "asc" },
        });

        if (!enemies.length) return replySafe(ctx, "‚ö†Ô∏è –°–ø–∏—Å–æ–∫ –≤—Ä–∞–≥–æ–≤ –ø—É—Å—Ç.");

        const seen = new Set<string>();
        const names = enemies
            .filter((e) => {
                const k = e.nickname.toLowerCase();
                if (seen.has(k)) return false;
                seen.add(k);
                return true;
            })
            .map((e) => e.nickname);

        const body = names
            .map((n) => `  <item name="${xmlEscape(n)}" />`)
            .join("\n");
        const xml = `<group name="${xmlEscape(GROUP_NAME)}">\n${body}\n</group>`;

        return replySafe(ctx, xml);
    });

    // Help
    bot.hears(/^(:–î–∂–∞—Ä–≤–∏—Å|@talibanlist_bot)\s+help/i, async (ctx) => {
        const text = `
üß† –í–ª–∞–¥–µ–ª–µ—Ü (OWNER)
‚Ä¢ add modid TG_ID –ù–ò–ö ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞
‚Ä¢ del mod –ù–ò–ö ‚Äî —É–¥–∞–ª–∏—Ç—å –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞

üë§ –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
‚Ä¢ add enemy / del enemy
‚Ä¢ add friend / del friend
‚Ä¢ check / give full
‚Ä¢ add enemy –ù–ò–ö –ü–†–ò–ß–ò–ù–ê ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –≤—Ä–∞–≥–∞
‚Ä¢ del enemy –ù–ò–ö ‚Äî —É–¥–∞–ª–∏—Ç—å –≤—Ä–∞–≥–∞
‚Ä¢ add friend –ù–ò–ö ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –¥—Ä—É–≥–∞
‚Ä¢ del friend –ù–ò–ö ‚Äî —É–¥–∞–ª–∏—Ç—å –¥—Ä—É–≥–∞
‚Ä¢ give full ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å XML —Å–ø–∏—Å–æ–∫ –≤—Ä–∞–≥–æ–≤
‚Ä¢ check –ù–ò–ö ‚Äî –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∏–∫ –≤ –ß–°/–¥—Ä—É–∑—å—è—Ö

‚Ä¢ check –ù–ò–ö ‚Äî –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∏–∫
‚Ä¢ give full ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å XML —Å–ø–∏—Å–æ–∫ –≤—Ä–∞–≥–æ–≤
`;
        return replySafe(ctx, text.trim());
    });
}
